1. Реализовать класс Stack, соответствующий структуре данных "стэк" (подход FILO - First In Last Out).

Требования:

- конструктор должен принимать опциональный аргумент data_type, по умолчанию - object.
  Идея заключается в том, что все добавляемые в стэк данные должны соответствовать типу из data_type.
- конструктор должен принимать опциональный аргумент limit (int), который определяет максимальный размер стэка.
  По умолчанию - None.


Методы:

- _push(): проверяет возможность добавления элемента в стэк (по лимиту и типу).
           В случае несоответствия типов должен генерить исключение TypeError.
           В случае достижения лимита - генерить LimitExceedError.
- push():  добавляет новый объект в стэк
- pull():  извлекает верхний элемент стэка и возвращает его. В случае пустого стэка генерит исключение EmptyStackError
- count(): возвращает количество элементов в стэке
- clear(): очищает стэк
- type():  возвращает тип данных стэка.

Также необходимо определить метод __str__, возвращающий строку вида "Stack<тип данных>" ("Stack<int>", например).


Дополнительные требования:

- код должен соответствовать требованиям PEP8
- необходимо наличие тестового скрипта test.py, в котором можно проверить работоспособность класса


Бонусы:

- Метод type() сделан через property.
- К методам написаны понятные docstrings.
